
.category-nav[data-v-7d5fc4f0] {
    border-bottom: 1px solid #e5e5e5;
    width: 100%;
    margin-bottom: 20px;
}
.category-nav .kbws-list[data-v-7d5fc4f0] {
        width: 1160px;
        margin-bottom: 0;
        border-bottom: 0;
}
.kbws-list[data-v-7d5fc4f0] {
    margin: 0 auto;
}
.kbwsli[data-v-7d5fc4f0] {
    margin-right: 20px;
    text-align: center;
    display: inline-block;
}
element.style[data-v-7d5fc4f0] {
}
.af-wrapper .category-nav .kbws-list .kbwsli.active a[data-v-7d5fc4f0], .af-wrapper .category-nav .kbws-list .kbwsli:hover a[data-v-7d5fc4f0] {
    border-bottom: 4px solid #111111;
}
.af-wrapper .category-nav .kbws-list .kbwsli a[data-v-7d5fc4f0] {
    font-family: SFPD-SemiBold;
}
.kbwsli.active a[data-v-7d5fc4f0], .kbwsli:hover a[data-v-7d5fc4f0] {
    border-bottom: 4px solid #111111;
}
.kbwsli a[data-v-7d5fc4f0] {
    display: block;
    font-family: SFD-SemiBold;
    font-size: 15px;
    line-height: 40px;
    color: #333;
    text-decoration: none;
    text-transform: uppercase;
    border-bottom: 4px solid #fff;
    padding-top: 8px;
}
.category-nav .kbws-list .kbwsli a[data-v-7d5fc4f0] {
    font-family: SFPD-SemiBold;
}
.kbws-list .kbwsli:hover a[data-v-7d5fc4f0] {
    border-bottom: 4px solid #111111;
}


.af_home20-wrapper[data-v-c352b2bc] {
    background: #ffffff;
    padding: 25px 0;
}
.af_home20-wrapper .af_section-mid[data-v-c352b2bc] {
        padding: 25px 0;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/