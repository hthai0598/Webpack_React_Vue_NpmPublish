@font-face {
    font-family: "SFPD-Medium";
    src: url('https://kenh14cdn.com/web_font/SFPD-Medium.otf');
}

@font-face {
    font-family: "SFPD-SemiBold";
    src: url('https://kenh14cdn.com/web_font/SFPD-SemiBold.otf');
}

@font-face {
    font-family: "SFPD-Regular";
    src: url('https://kenh14cdn.com/web_font/SFPD-Regular.otf');
}

@font-face {
    font-family: "SFPD-Bold";
    src: url('https://kenh14cdn.com/web_font/SFPD-Bold.otf');
}

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

*:focus {
    outline: none;
}


body {
    line-height: 1;
    font-family: Arial, Helvetica, sans-serif;
    -webkit-font-smoothing: antialiased;
}

a {
    text-decoration: none;
}

ul {
    list-style-type: none;
}

.list_afnews-mid li {
    margin-bottom: 25px;
    padding-bottom: 25px;
    border-bottom: 1px dashed #E5E5E5;
}

    .list_afnews-mid li:nth-last-child(1) {
        margin-bottom: 0;
        border-bottom: none;
        padding-bottom: 0;
    }

.af-wrapper {
    overflow: hidden;
    min-width: 1120px;
}

.w1040 {
    width: 1040px;
    margin: 0 auto;
}

.w1160 {
    width: 1160px;
    max-width: 100%;
    margin: 0 auto;
}

.af_home20-wrapper .af_flx.justifySB {
    justify-content: space-between;
}

.af_flx {
    display: flex;
    align-items: flex-start;
}

.af_home20-wrapper .af_bigleft {
    width: 540px;
    max-width: 100%;
}

.af_home20-wrapper .af_bigright {
    width: 590px;
    max-width: 100%;
}

.af_home20-wrapper .af_midright-right, .af_home20-wrapper .af_midright-left {
    width: 270px;
}


.popup-register[data-v-01656b07] {
    display: block;
    position: absolute;
    top: 70px;
    right: 0;
    z-index: 11;
    transition: transform 0.3s;
}
.popup-register-wrapper[data-v-01656b07] {
    padding: 22px;
    background: #ffffff;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.05);
    border-radius: 5px;
    display: flex;
    flex-direction: column;
}


.act-link[data-v-d5b6f46c] {
  padding: 7px 20px;
  background: #f1f1f1;
  border: 1px solid #e5e5e5;
  box-sizing: border-box;
  border-radius: 100px;
  display: flex;
  align-items: center;
  cursor: pointer;
}
.act-link .txt[data-v-d5b6f46c] {
  font-size: 13px;
  line-height: 16px;
  color: #555555;
  font-family: SFPD-Regular;
  margin-left: 9px;
}


.btn-logout[data-v-08af537a] {
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
}
.btn-logout .ava[data-v-08af537a] {
        width: 30px;
        padding-right: 15px;
        position: relative;
}
.btn-logout .ava i[data-v-08af537a] {
            width: 100%;
            padding-top: 100%;
            display: block;
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
            border-radius: 50%;
}
.btn-logout .ava .icn[data-v-08af537a] {
            position: absolute;
            top: 50%;
            right: 0;
            transform: translateY(-50%);
}


.popup-detail[data-v-084b486b] {
    cursor: pointer
}
.popup-register-wrapper .popup-detail[data-v-084b486b] {
    padding-bottom: 15px;
    margin-bottom: 15px;
}
.popup-register-wrapper .popup-detail[data-v-084b486b] {
    display: flex;
    align-items: center;
    position: relative;
}
.popup-detail .txt[data-v-084b486b] {
    font-size: 13px;
    line-height: 16px;
    color: #353535;
    font-family: SFPD-SemiBold;
    margin-left: 15px;
}


.toolbar[data-v-6adfe63e] {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 70px;
    position: relative;
}
.popup-detail[data-v-6adfe63e]::before {
    position: absolute;
    content: '';
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 95%;
    height: 1px;
    background: #F2F2F2;
}
.popup-detail .txt[data-v-6adfe63e] {
    font-size: 13px;
    line-height: 16px;
    color: #353535;
    font-family: SFPD-SemiBold;
    margin-left: 15px;
}


a[data-v-08d29ae4] {
  position: relative;
  font-size: 15px;
  line-height: 20px;
  color: #333333;
  font-family: SFPD-SemiBold;
}


.label[data-v-b685188e] {
  font-size: 17px;
  line-height: 24px;
  color: #161616;
  margin-bottom: 10px;
  font-family: SFPD-SemiBold;
}


ul[data-v-043067ac] {
    list-style: none;
}
.show-all-menu-wrapper[data-v-043067ac] {
    display: flex;
    flex-direction: column;
    padding: 30px 0;
}
.show-all-menu-wrapper .grid-menu[data-v-043067ac] {
        display: grid;
        grid-template-columns: 19.2% 19.2% 19.2% 19.2% 19.2%;
        justify-content: space-between;
        margin-bottom: 30px;
        padding-bottom: 30px;
        border-bottom: 1px solid #eeeeee;
}
.grid-menu .grid-item[data-v-043067ac] {
    display: flex;
    flex-direction: column;
}
.cate[data-v-043067ac] {
    color: #161616;
    font-family: SFPD-SemiBold;
}
a[data-v-043067ac] {
    text-decoration: none;
    font-size: 15px;
    line-height: 20px;
    color: #616161;
    font-family: SFPD-Regular;
    margin-bottom: 10px;
}



/* lstNewSpaper */
.show-all-menu-wrapper .list-news-paper[data-v-043067ac] {
    display: flex;
    flex-direction: column;
}
.news-paper-wrapper[data-v-043067ac] {
    display: grid;
    grid-template-columns: repeat(11, 8%);
    justify-content: space-between;
}
.news-paper-wrapper .news-paper[data-v-043067ac] {
        border: 1px solid #eeeeee;
        border-radius: 10px;
}
.news-paper a[data-v-043067ac] {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    padding: 10px 0;
}
.news-paper a .logo[data-v-043067ac] {
        width: 50px;
        padding-top: 50px;
        position: relative;
        display: block;
}
.news-paper a .url[data-v-043067ac] {
        font-size: 13px;
        line-height: 16px;
        color: #353535;
        margin-top: 10px;
        font-family: SFPD-SemiBold;
}
.news-paper a .logo img[data-v-043067ac] {
        position: absolute;
        width: 100%;
        height: 100%;
        display: block;
        top: 0;
        left: 0;
}
.show-all-menu[data-v-043067ac] {
    width: 100%;
    position: absolute;
    top: 45px;
    left: 0;
    background: rgba(255, 255, 255, 0.95);
    box-shadow: 0px 1px 0px rgba(0, 0, 0, 0.05), 0px 11px 10px rgba(0, 0, 0, 0.05);
    backdrop-filter: blur(10px);
    z-index: 10;
}


.menu_toggle-mobile[data-v-0d809d89] {
    display: flex;
    align-items: center;
    justify-content: center;
}
.menu_toggle-mobile .menu_toggle_wrapper[data-v-0d809d89] {
        display: flex;
        align-items: center;
}
.txt[data-v-0d809d89] {
    margin-right: 10px;
    color: #aaaaaa;
}
.menu_toggle_icon[data-v-0d809d89] {
    display: block;
    width: 18px;
    height: 12px;
    position: relative;
    opacity: 0.8;
    cursor: pointer;
    -webkit-transition: opacity 0.3s;
    -moz-transition: opacity 0.3s;
    -ms-transition: opacity 0.3s;
    transition: opacity 0.3s;
}
.menu_toggle_icon i[data-v-0d809d89] {
        display: block;
        width: 100%;
        height: 2px;
        background-color: #aaaaaa;
        position: absolute;
        left: 0;
        transition: all 0.3s;
}
.menu_toggle_icon i.line-2[data-v-0d809d89] {
            top: 5px;
}
.menu_toggle_icon i.line-3[data-v-0d809d89] {
            top: 10px;
}
.hwg_menu_mobile--is-active .menu_toggle_icon[data-v-0d809d89] {
    opacity: 1;
}
.hwg_menu_mobile--is-active .menu_toggle_icon i.line-1[data-v-0d809d89] {
        transform: rotate(-45deg);
        top: 6px;
}
.hwg_menu_mobile--is-active .menu_toggle_icon i.line-2[data-v-0d809d89] {
        display: none;
}
.hwg_menu_mobile--is-active .menu_toggle_icon i.line-3[data-v-0d809d89] {
        transform: rotate(45deg);
        top: 6px;
        width: 100%;
}
.hwg_menu_mobile--is-active .af-wrapper .menu .show-all-menu[data-v-0d809d89] {
    display: block;
}


@keyframes placeHolderShimmer-data-v-72cbe94c {
0% {
        background-position: -468px 0
}
100% {
        background-position: 468px 0
}
}
.text-loading[data-v-72cbe94c] {
    width: 100%;
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-72cbe94c;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.text-loading .thumb[data-v-72cbe94c] {
        margin-bottom: 10px;
        display: block;
}
.text-loading .thumb i[data-v-72cbe94c] {
            border: none;
}
a.thumb[data-v-72cbe94c] {
    height: 15px
}


ul[data-v-02ff0d5c] {
    list-style: none;
}
.menu[data-v-02ff0d5c] {
    background: #ffffff;
}
.menu-item a[data-v-02ff0d5c] {
    position: relative;
    font-size: 15px;
    line-height: 20px;
    color: #333333;
    font-family: SFPD-SemiBold;
}
.list-menu[data-v-02ff0d5c] {
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.list-menu .menu-item[data-v-02ff0d5c] {
        cursor: pointer;
        font-size: 15px;
        line-height: 20px;
        color: #333333;
        font-family: SFPD-SemiBold;
        margin-right: 30px
}
.menu-wrapper[data-v-02ff0d5c] {
    padding: 10px 0;
}


#sponsorbox_TopPage[data-v-7267cd85] {
    background: #EEF4F9;
    padding: 25px 0;
}


main[data-v-5f2c575d] {
    position: relative;
}


.afnews_sapo[data-v-ac4dfb6a] {
    margin-top: 5px;
    font-size: 13px;
    line-height: 150%;
    font-family: SFPD-Regular;
    letter-spacing: 0.2px;
    display: block;
    color: #888888;
    margin-bottom: 5px;
}
.line-clam3[data-v-ac4dfb6a] {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}


.afnews-type[data-v-fd734608] {
    font-size: 13px;
    line-height: 16px;
    font-family: SFPD-SemiBold;
    text-transform: uppercase;
    color: #aaaaaa;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    cursor: pointer
}
.afnews-type a[data-v-fd734608] {
        color: #aaaaaa;
}
.afnews-type[type="eMag-tag"] .eMag-tag[data-v-fd734608] {
        padding: 4px 8px;
        background: rgba(0, 0, 0, 0.8);
        border-radius: 4px;
        width: 86px;
        height: 20px;
        box-sizing: border-box;
        margin-right: 8px;
        display: block;
}


.afnews_title[data-v-a115d394] {
    font-family: SFPD-SemiBold;
    line-height: 140%;
    color: #111111;
    display: block;
    word-break: break-word;
    cursor: pointer
}
.line-clam4[data-v-a115d394] {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
}
.afnews_title[data-v-a115d394]:hover {
    color: #666666;
}


.sourse[data-v-cab50a46] {
    display: flex;
    align-items: center;
    font-size: 13px;
    line-height: 16px;
    color: #8e8e8e;
    font-family: SFPD-Regular;
    margin-bottom: 10px;
}
.sourse .sourse-link[data-v-cab50a46] {
        margin-right: 4px;
        color: #8e8e8e;
}


.thumb i[data-v-5d3150d9] {
    width: 100%;
    padding-top: 62.4%;
    display: block;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
}
.thumb[data-v-5d3150d9] {
    cursor: pointer;
    display: block;
}


.function[data-v-3266b6cf] {
    display: flex;
    align-items: center;
}
.function a[data-v-3266b6cf] {
        display: flex;
        margin-right: 12px;
}


.af_home20-wrapper .afnews_box .thumb[data-v-74e49467] {
    display: block;
}
.af_home20-wrapper .afnews_box[type="bigThumb"][data-v-74e49467] {
    padding-bottom: 25px;
    border-bottom: 1px dashed #e5e5e5;
    margin-bottom: 25px;
}
.af_home20-wrapper .afnews_box[type="midThumb"][data-v-74e49467] {
    padding-bottom: 18px;
}
.afnews_tt[data-v-74e49467] {
    font-size: 13px;
    line-height: 16px;
    color: #555555;
    display: flex;
    align-items: center;
    font-family: SFPD-Regular;
    justify-content: space-between;
}


.last-act[data-v-25b2bec1] {
    align-items: center;
    padding: 5px 10px;
    border: 1px solid #C7C7C7;
    box-sizing: border-box;
    border-radius: 100px;
}
.last-act .txt[data-v-25b2bec1] {
    font-size: 13px;
    line-height: 16px;
    color: #8E8E8E;
    font-family: SFPD-Regular;
    margin-left: 5px;
}


.function[data-v-3e905244] {
    display: flex;
    margin-top: 15px;
    align-items: center;
}
.function a[data-v-3e905244] {
        cursor: pointer;
        display: flex;
        margin-right: 12px;
}


.af_flx[data-v-5f177d10] {
    display: flex;
    align-items: flex-start;
}
.afnews_tt[data-v-5f177d10] {
    font-size: 13px;
    line-height: 16px;
    color: #555555;
    display: flex;
    align-items: center;
    font-family: SFPD-Regular;
    justify-content: space-between;
}


.label-news[data-v-b6a14790] {
  font-size: 22px;
  line-height: 28px;
  color: #161616;
  font-family: SFPD-SemiBold;
  margin-bottom: 15px;
}


@keyframes placeHolderShimmer-data-v-23641186 {
0% {
        background-position: -468px 0
}
100% {
        background-position: 468px 0
}
}
.animated-background[data-v-23641186], .sourse[data-v-23641186], .afnews_box .thumb i[data-v-23641186], .afnews_box .afnews_title[data-v-23641186], .af_bigright-right .spon-banner[data-v-23641186], .ct-box .wrapper-cell .image[data-v-23641186], .ct-box .wrapper-cell .text-line[data-v-23641186], .wrapper-cell .image[data-v-23641186], .wrapper-cell .text-line[data-v-23641186] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-23641186;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.sourse[data-v-23641186] {
    display: flex;
    align-items: center;
    font-size: 13px;
    line-height: 16px;
    color: #8E8E8E;
    font-family: SFPD-Regular;
    margin-bottom: 10px;
}
.afnews_box .thumb i[data-v-23641186] {
    width: 100%;
    padding-top: 62.4%;
    display: block;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
    border-radius: 8px;
}
.afnews_box[type='bigThumb'][data-v-23641186] {
    padding-bottom: 25px;
    border-bottom: 1px dashed #E5E5E5;
    margin-bottom: 25px;
}
.label-news[data-v-23641186] {
    font-size: 22px;
    line-height: 28px;
    color: #161616;
    font-family: SFPD-SemiBold;
    margin-bottom: 15px;
}
.afnews_box[type='bigThumb'] .thumb[data-v-23641186] {
    margin-bottom: 10px;
    display: block;
}
.afnews_box .thumb i[data-v-23641186] {
    border: none;
}
.sourse[data-v-23641186] {
    height: 10px;
    margin: 4px 0;
}
.sourse .sourse-link[data-v-23641186] {
        margin-right: 4px;
        color: #8E8E8E;
}
.afnews_box .afnews_title[data-v-23641186] {
    height: 10px;
    margin: 4px 0;
}


@keyframes placeHolderShimmer-data-v-34083c85 {
0% {
        background-position: -468px 0
}
100% {
        background-position: 468px 0
}
}
.animated-background[data-v-34083c85], .sourse[data-v-34083c85], .afnews_box .thumb i[data-v-34083c85], .afnews_box .afnews_title[data-v-34083c85], .af_bigright-right .spon-banner[data-v-34083c85], .ct-box .wrapper-cell .image[data-v-34083c85], .ct-box .wrapper-cell .text-line[data-v-34083c85], .wrapper-cell .image[data-v-34083c85], .wrapper-cell .text-line[data-v-34083c85] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-34083c85;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.sourse[data-v-34083c85] {
    display: flex;
    align-items: center;
    font-size: 13px;
    line-height: 16px;
    color: #8E8E8E;
    font-family: SFPD-Regular;
    margin-bottom: 10px;
}
.afnews_box .thumb i[data-v-34083c85] {
    width: 100%;
    padding-top: 62.4%;
    display: block;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
    border-radius: 8px;
}
.afnews_box[type='midThumb'] .thumb[data-v-34083c85] {
    width: 260px;
    margin-bottom: 8px;
}
.label-news[data-v-34083c85] {
    font-size: 22px;
    line-height: 28px;
    color: #161616;
    font-family: SFPD-SemiBold;
    margin-bottom: 15px;
}
.afnews_box[type='bigThumb'] .thumb[data-v-34083c85] {
    margin-bottom: 10px;
    display: block;
}
.afnews_box .thumb i[data-v-34083c85] {
    border: none;
}
.sourse[data-v-34083c85] {
    height: 10px;
    margin: 4px 0;
}
.sourse .sourse-link[data-v-34083c85] {
        margin-right: 4px;
        color: #8E8E8E;
}
.afnews_box .afnews_title[data-v-34083c85] {
    height: 10px;
    margin: 4px 0;
}


.af_home20-wrapper .af_bigleft[data-v-dfacbdb0] {
    width: 540px;
    max-width: 100%;
}
.list_afnews-top li[data-v-dfacbdb0] {
    width: 260px
}
.af_home20-wrapper .af_flx[data-v-dfacbdb0] {
    display: flex;
    align-items: flex-start;
}


@keyframes placeHolderShimmer-data-v-dd2919da {
0% {
        background-position: -468px 0
}
100% {
        background-position: 468px 0
}
}
.animated-background[data-v-dd2919da], .sourse[data-v-dd2919da], .afnews_box .thumb i[data-v-dd2919da], .afnews_box .afnews_title[data-v-dd2919da], .af_bigright-right .spon-banner[data-v-dd2919da], .ct-box .wrapper-cell .image[data-v-dd2919da], .ct-box .wrapper-cell .text-line[data-v-dd2919da], .wrapper-cell .image[data-v-dd2919da], .wrapper-cell .text-line[data-v-dd2919da] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-dd2919da;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.afnews_box .thumb i[data-v-dd2919da] {
    width: 100%;
    padding-top: 62.4%;
    display: block;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-sizing: border-box;
    border-radius: 8px;
}
.afnews_box[type='smallThumb'] .thumb[data-v-dd2919da] {
    width: 80px;
    margin-right: 10px;
}
.label-news[data-v-dd2919da] {
    font-size: 22px;
    line-height: 28px;
    color: #161616;
    font-family: SFPD-SemiBold;
    margin-bottom: 15px;
}
.afnews_box[type='bigThumb'] .thumb[data-v-dd2919da] {
    margin-bottom: 10px;
    display: block;
}
.afnews_box .thumb i[data-v-dd2919da] {
    border: none;
}
.afnews_total[data-v-dd2919da] {
    flex-grow: 1;
    display: block;
    height: 10px;
    margin: 4px 0;
}
.sourse[data-v-dd2919da] {
    font-size: 11px;
    line-height: 16px;
    margin-bottom: 0;
    margin-top: 5px;
}
.sourse-link[data-v-dd2919da] {
    margin-right: 4px;
    color: #8E8E8E;
}
.sourse[data-v-dd2919da] {
    font-size: 11px;
    line-height: 10px;
    margin-bottom: 0;
    margin-top: 5px;
}


@keyframes placeHolderShimmer-data-v-b97ccc32 {
0% {
        background-position: -468px 0
}
100% {
        background-position: 468px 0
}
}
.af_bigright-right .spon-banner[data-v-b97ccc32] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-b97ccc32;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.spon-banner[data-v-b97ccc32] {
    padding-bottom: 25px;
    border-bottom: 1px dashed #E5E5E5;
    margin-bottom: 25px;
}
.spon-banner .thumb[data-v-b97ccc32] {
    margin-bottom: 10px;
    display: block;
}
.spon-banner .thumb i[data-v-b97ccc32] {
        border: none;
}
a.thumb[data-v-b97ccc32] {
    height: 800px
}


.af_bigright-left[data-v-9b60c46a] {
    width: 265px;
}
.af_bigright-right[data-v-9b60c46a] {
    width: 300px;
}
.list_afnews-topright li[data-v-9b60c46a] {
    padding-top: 18px;
}


.af_section-top[data-v-664e1c9a] {
    margin-bottom: 25px;
    padding-bottom: 30px;
    border-bottom: 1px solid #d6dce2;
}


.afnews_box .type_box .type[data-v-1d471442] {
  font-size: 13px;
  line-height: 16px;
  font-family: SFPD-Regular;
  color: #888888;
  margin-bottom: 6px;
}
.afnews_box .type_box .text[data-v-1d471442] {
  font-size: 14px;
  line-height: 16px;
  font-family: SFPD-SemiBold;
  color: #555555;
}
.afnews_box .type_box[data-v-1d471442] {
  margin-bottom: 12px;
}
.af_home20-wrapper .afnews_box .type_box + .type_box[data-v-1d471442] {
  margin-bottom: 20px;
}


.btnfunc[data-v-6ad265f3] {
  background: #ffffff;
  border-radius: 6px;
  height: 32px;
  width: 100%;
  display: flex;
  align-items: center;
  padding: 8px 12px;
  box-sizing: border-box;
}
.btnfunc .icn[data-v-6ad265f3] {
  display: flex;
  align-items: center;
  margin-right: 8px;
}
.btnfunc .txt[data-v-6ad265f3] {
  font-size: 13px;
  line-height: 16px;
  font-family: SFPD-SemiBold;
  display: block;
  color: #555555;
}


.afnews_box[type="tutorial"] .thumb_box .howto[data-v-511ae29f] {
  flex-grow: 1;
  padding: 11px 15px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}
.afnews_box[type="tutorial"] .thumb_box[data-v-511ae29f] {
  margin-bottom: 15px;
  display: flex;
  background: #eef4f9;
}


.afnews_box[type="gallery"] .thumb_big[data-v-7903b421] {
  grid-row: 1/4;
  grid-column: 1/1;
}
.afnews_box[type="gallery"] .thumb_hoz-1[data-v-7903b421] {
  grid-row: 1/2;
  grid-column: 2/2;
}
.afnews_box[type="gallery"] .thumb_hoz-2[data-v-7903b421] {
  grid-row: 2/3;
  grid-column: 2/2;
}
.af_home20-wrapper .afnews_box[type="gallery"] .btn_gr[data-v-7903b421] {
  grid-row: 3/4;
  grid-column: 2/2;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.afnews_box[type="gallery"] .thumb_big i[data-v-7903b421] {
  padding-top: 142.16%;
}
.afnews_box[type="gallery"] .thumb_box[data-v-7903b421] {
  display: grid;
  grid-template: auto auto 75px / 370px 155px;
  grid-gap: 15px;
  margin-bottom: 15px;
}
.afnews_box[type="gallery"][data-v-7903b421] {
  padding-bottom: 25px;
  border-bottom: 1px dashed #d6dce2;
  margin-bottom: 25px;
}
.afnews_box .thumb[data-v-7903b421] {
  display: block;
}
.afnews_box .thumb i[data-v-7903b421] {
  width: 100%;
  padding-top: 62.4%;
  display: block;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-sizing: border-box;
  border-radius: 8px;
}
.af_home20-wrapper .afnews_box[type="gallery"] .thumb_hoz i[data-v-7903b421] {
  width: 100%;
  height: 100%;
  display: block;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  border: 1px solid rgba(0, 0, 0, 0.1);
  box-sizing: border-box;
}


.wrapper-cell.af_flx[data-v-7616a1f8] {
    display: flex;
}
.wrapper-cell .image[data-v-7616a1f8] {
    height: 160px;
    width: 260px;
    margin-bottom: 8px;
}
.wrapper-cell.af_flx .image[data-v-7616a1f8] {
    margin-right: 20px;
    margin-bottom: 0;
}
.wrapper-cell.af_flx .image[data-v-7616a1f8] {
    flex-shrink: 0;
}
.wrapper-cell.af_flx .text[data-v-7616a1f8] {
    flex-grow: 1;
    display: block;
}
.wrapper-cell .text-line[data-v-7616a1f8] {
    height: 10px;
    margin: 4px 0;
}
.wrapper-cell .image[data-v-7616a1f8],
.af_home20-wrapper .wrapper-cell .text-line[data-v-7616a1f8] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-7616a1f8;
    animation-timing-function: linear;
    background: #f6f6f6;
    background: linear-gradient(to right, #f6f6f6 8%, #f0f0f0 18%, #f6f6f6 33%);
    background-size: cover;
    position: relative;
}
.wrapper-cell.af_flx[type='midThumb'][data-v-7616a1f8] {
    display: flex;
}
.image[data-v-7616a1f8] {
    margin-right: 20px;
    margin-bottom: 0;
}
.wrapper-cell.af_flx .image[data-v-7616a1f8] {
    flex-shrink: 0;
}
.wrapper-cell[type='midThumb'] .image[data-v-7616a1f8] {
    height: 160px;
    width: 260px;
    margin-bottom: 8px;
}
.wrapper-cell .text-line[data-v-7616a1f8] {
    animation-duration: 1.25s;
    animation-fill-mode: forwards;
    animation-iteration-count: infinite;
    animation-name: placeHolderShimmer-data-v-7616a1f8;
    animation-timing-function: linear;
    background: #F6F6F6;
    background: linear-gradient(to right, #F6F6F6 8%, #F0F0F0 18%, #F6F6F6 33%);
    background-size: cover;
    position: relative;
}
.wrapper-cell.af_flx .text[data-v-7616a1f8] {
    flex-grow: 1;
    display: block;
}
.wrapper-cell .text-line[data-v-7616a1f8] {
    height: 10px;
    margin: 4px 0;
}
@keyframes placeHolderShimmer-data-v-7616a1f8 {
0% {
        background-position: -468px 0;
}
100% {
        background-position: 468px 0;
}
}


.carousel_root[data-v-4b01ec13] {
    width: 100%;
    position: relative;
    overflow: hidden;
    margin-bottom: 15px;
}
.carousel_list[data-v-4b01ec13] {
    width: 100%;
    margin: 10px auto;
    display: flex;
    justify-content: left;
    position: relative;
    transform: translateX(0);
    transition: 0.5s
}
.carousel_list[data-v-4b01ec13]::-webkit-scrollbar {
        display: none;
}
.carousel_item[data-v-4b01ec13] {
    border: 1px solid black;
    height: auto;
    position: relative;
    left: 0;
    text-align: center;
    margin-right: 10px;
    border-radius: 8px;
    box-sizing: border-box;
}
.carousel_item img[data-v-4b01ec13] {
        width: 100%;
        height: 100%;
        object-fit: contain;
}
span[data-v-4b01ec13] {
    position: absolute;
    top: 35%;
    font-size: 30px;
    font-weight: bold;
    color: red;
    cursor: pointer;
    z-index: 1;
}
span[data-v-4b01ec13]:nth-of-type(2) {
        left: 93%;
        text-align: right;
}
.thumb-cont[data-v-4b01ec13]::before {
    position: absolute;
    content: '';
    width: 15%;
    height: 100%;
    background: linear-gradient(270deg, #FFFFFF 0%, rgba(255, 255, 255, 0) 100%);
    top: 0;
    right: 0;
    z-index: 2;
}


.af_flx[data-v-7cf64543] {
    display: flex;
    align-items: flex-start;
}
.afnews_box.af_flx.row_reverse[data-v-7cf64543] {
    flex-direction: row-reverse;
    justify-content: space-between;
}


.update-news[data-v-741e6ec2] {
  display: flex;
  justify-content: space-between;
}
.thumb[data-v-741e6ec2] {
  width: 48%;
  margin-right: 15px;
}
.update-news .thumb i[data-v-741e6ec2] {
  width: 100%;
  display: block;
  position: relative;
  padding-top: 133.5%;
  border-radius: 8px;
  overflow: hidden;
}
.update-news .thumb i img[data-v-741e6ec2] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: block;
}
.update-news .thumb i .title[data-v-741e6ec2] {
  position: absolute;
  bottom: 0;
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 5px 0;
  width: 100%;
  box-sizing: border-box;
  background: #ff2626;
}
.update-news .thumb i .title .icn[data-v-741e6ec2] {
  display: flex;
}
.update-news .thumb i .title .txt[data-v-741e6ec2] {
  font-size: 13px;
  line-height: 20px;
  text-transform: uppercase;
  color: #ffffff;
  margin-left: 10px;
  font-family: SFPD-SemiBold;
}
.update-news .info[data-v-741e6ec2] {
  width: 48%;
  display: flex;
  flex-direction: column;
}
.update-news .info .cate[data-v-741e6ec2] {
  font-size: 13px;
  line-height: 16px;
  text-transform: uppercase;
  color: #353535;
  font-family: SFPD-SemiBold;
  margin-bottom: 8px;
}
.update-news .info .title[data-v-741e6ec2] {
  font-size: 17px;
  line-height: 24px;
  color: #353535;
  font-family: SFPD-SemiBold;
  margin-bottom: 8px;
}
.update-news .info .list-update-news[data-v-741e6ec2] {
  border-top: 1px solid #f1f1f1;
  padding-top: 15px;
  display: flex;
  flex-direction: column;
}
.update-news .info .list-update-news li[data-v-741e6ec2] {
  margin-bottom: 15px;
  padding-bottom: 0;
  border-bottom: none;
  display: flex;
  align-items: center;
  justify-content: space-between;
}


.load-more-btn {
    cursor:pointer;
    display: flex;
    justify-content: center;
    height: 40px;
    border: 1px solid #e5e5e5;
    align-items: center;
    font-family: SFPD-SemiBold;
    font-size: 13px;
    color: #333;
}
.af_home20-wrapper .load-more-cell .load-more-btn i {
    margin-left: 5px;
}


.af_home20-wrapper .list_afnews-mid li[data-v-bc5a9cca] {
    margin-bottom: 25px;
    padding-bottom: 25px;
    border-bottom: 1px dashed #e5e5e5;
}
.afnews_box[type="tutorial"][data-v-bc5a9cca] {
    padding-bottom: 25px;
    border-bottom: 1px dashed #d6dce2;
    margin-bottom: 25px;
}


.afcategory[data-v-26bf9d2f] {
    margin-bottom: 25px;
    padding: 15px;
    background: #f1f1f1;
}
.afcategory .afcate_heading[data-v-26bf9d2f] {
        cursor: pointer;
        border-bottom: 1px solid #d6dce2;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
}
.afcategory .afcate_headingNone[data-v-26bf9d2f] {
        cursor: pointer;
        margin-bottom: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
}
.afcategory .afcate_heading .text[data-v-26bf9d2f] {
        font-size: 18px;
        line-height: 140%;
        font-family: SFPD-Bold;
        text-transform: uppercase;
        /*padding-bottom: 7px;*/
        display: inline-block;
        border-bottom: 2px solid #161616;
        color: #161616;
}
.afcategory .afcate_headingNone .textNone[data-v-26bf9d2f] {
        font-size: 18px;
        line-height: 140%;
        font-family: SFPD-Bold;
        text-transform: uppercase;
        padding-bottom: 7px;
        display: inline-block;
        color: #161616;
}


.title-involve[data-v-b3ba0cf2] {
    font-size: 13px;
    line-height: 140%;
    text-transform: uppercase;
    color: #888888;
    font-family: SFPD-Regular;
    margin-bottom: 5px;
    cursor: pointer
}


.title-event[data-v-52486964] {
    font-size: 17px;
    line-height: 140%;
    color: #111111;
    font-family: SFPD-SemiBold;
    margin-bottom: 5px;
    cursor: pointer
}


.info[data-v-1ebb31e1] {
    padding: 15px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    background: #FFFFFF;
    flex-grow: 1;
}
.info .event-involve[data-v-1ebb31e1] {
        padding-top: 15px;
        border-top: 1px solid #f1f1f1;
        display: flex;
        align-items: center;
        justify-content: space-between;
}
.info .event-involve .txt[data-v-1ebb31e1] {
            font-size: 13px;
            line-height: 16px;
            color: #1f9ffc;
            font-family: SFPD-SemiBold;
}


.event .event-wrapper[data-v-bff1fdd4] {
    display: flex;
    justify-content: space-between;
    cursor: pointer
}
.event-detail[data-v-bff1fdd4] {
    width: 48.5%;
    display: flex;
    flex-direction: column;
}
.event .event-wrapper .event-detail .info .title-involve[data-v-bff1fdd4] {
    font-size: 13px;
    line-height: 140%;
    text-transform: uppercase;
    color: #888888;
    font-family: SFPD-Regular;
    margin-bottom: 5px;
}
.event .event-wrapper .event-detail .info .title-event[data-v-bff1fdd4] {
    font-size: 17px;
    line-height: 140%;
    color: #111111;
    font-family: SFPD-SemiBold;
    margin-bottom: 5px;
}


.af_midright-right[data-v-bfd5ced2],
.af_midright-left[data-v-bfd5ced2] {
    width: 270px;
}
.list_afnews-midright li + li[data-v-bfd5ced2] {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px dashed #D6DCE2;
}


.afnews_box[kind="row_reverse"] + [kind="row_reverse"][data-v-bf9d70ce] {
    margin-top: 25px;
    padding-top: 25px;
    border-top: 1px dashed #d6dce2;
}


.list_afnews-nothumb li[data-v-bf8141cc] {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px dashed #e5e5e5;
}


.topic .topic-wrapper .topic-detail .detail-info[data-v-57d0d0f2] {
    width: 93%;
    display: flex;
    flex-direction: column;
    padding: 15px;
    box-sizing: border-box;
}
.topic .topic-wrapper .topic-detail[data-v-57d0d0f2] {
    display: flex;
    border-radius: 6px;
    background: #ffffff;
    margin-bottom: 15px;
}
.topic
    .topic-wrapper
    .topic-detail
    .detail-info
    .topic-involve
    .topic-involve-txt[data-v-57d0d0f2] {
        font-size: 13px;
        line-height: 16px;
        color: #8e8e8e;
        font-family: SFPD-Regular;
}
.topic .topic-wrapper .topic-detail .detail-info .topic-involve[data-v-57d0d0f2] {
        display: flex;
        justify-content: space-between;
}
.topic .topic-wrapper .topic-detail .action-link[data-v-57d0d0f2] {
        width: 7%;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: -10px 0px 10px rgba(0, 0, 0, 0.05);
}


.topic .topic-wrapper .show-more[data-v-bf6512ca] {
    background: #ffffff;
}
.show-more a[data-v-bf6512ca] {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 12px 0;
    font-size: 14px;
    line-height: 16px;
    color: #333333;
    font-family: SFPD-SemiBold;
}
.show-more a .count[data-v-bf6512ca] {
        margin-left: 8px;
        padding: 2px 8px;
        background: #e5e5e5;
        border-radius: 6px;
}
.topic[data-v-bf6512ca] {
    cursor: pointer
}


.list_afnews-smallThumb[data-v-bf48e3c8] {
    margin-top: 10px;
}
.af_home20-wrapper .list_afnews-smallThumb li[data-v-bf48e3c8] {
    padding-top: 10px;
    border-top: 1px dashed #e5e5e5;
    margin-top: 10px;
}


.af_bigright-left[data-v-03ed5d15] {
    width: 265px;
}
.af_bigright-right[data-v-03ed5d15] {
    width: 300px;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/