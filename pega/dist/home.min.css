
.af_home20-wrapper[data-v-5a90ec03] {
    background: #ffffff;
    padding: 25px 0;
}
.af_home20-wrapper .af_section-mid[data-v-5a90ec03] {
        padding: 25px 0;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/