
.pbc-expand[data-v-3d305804] {
    display: flex;
    z-index:100000;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 200px;
    justify-content: center;
    align-items: flex-end;
    cursor:pointer;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 100%);
}
.blog-expand-btn[data-v-3d305804] {
    display: inline-flex;
    height: 48px;
    padding: 0 25px;
    font-weight: bold;
    color: #1f9ffc;
    font-size: 16px;
    grid-column-gap: 10px;
    background: linear-gradient(180deg, #ffffff 0%, #f4f8ff 100%);
    border: 2px solid #1f9ffc;
    box-sizing: border-box;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
    border-radius: 100px;
    align-items: center;
}


.pbc-expand[data-v-5dcd3a35] {
    display: flex;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 200px;
    justify-content: center;
    align-items: flex-end;
    background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 100%);
}
.blog-expand-btn[data-v-5dcd3a35] {
    display: inline-flex;
    height: 48px;
    padding: 0 25px;
    font-weight: bold;
    color: #1f9ffc;
    font-size: 16px;
    grid-column-gap: 10px;
    background: linear-gradient(180deg, #ffffff 0%, #f4f8ff 100%);
    border: 2px solid #1f9ffc;
    box-sizing: border-box;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.1);
    border-radius: 100px;
    align-items: center;
}


.popup-body-wrapper[data-v-0dbb0329] {
    transition: all 500ms ease;
}
.pb-body.body-collapsed .pbc-content[data-v-0dbb0329] {
    max-height: 50vh;
    overflow: hidden;
    transition: max-height 0.3s;
}
.popup-body-wrapper[data-v-0dbb0329] {
    display: flex;
    justify-content: space-between;
}
.popup-body-wrapper .popup-body-left[data-v-0dbb0329] {
        max-width: 760px;
}
.popup-body-wrapper .popup-body-right[data-v-0dbb0329] {
        width: 400px;
}
.popup-body-wrapper .popup-body-left .popup-body-left-wrapper[data-v-0dbb0329] {
        padding: 0 80px;
        box-sizing: border-box;
        position: relative;
}
.popup-body-wrapper .popup-body-left .popup-body-left-wrapper[data-v-0dbb0329]::before {
            position: absolute;
            content: "";
            width: 1px;
            height: 90%;
            background: #eeeeee;
            top: -40px;
            right: 0;
}
.popup-body-wrapper .popup-body-left .popup-body-left-wrapper .popup-body-top[data-v-0dbb0329] {
            display: flex;
            flex-direction: column;
            margin-bottom: 20px;
            position: relative;
}
.popup-body-wrapper
        .popup-body-left
        .popup-body-left-wrapper
        .popup-body-bottom[data-v-0dbb0329]::before {
            position: absolute;
            content: "";
            width: 100%;
            height: 1px;
            background: #eeeeee;
            top: 0;
            left: 0;
}
.popup-body-wrapper
        .popup-body-left
        .popup-body-left-wrapper
        .popup-body-top
        .pb-header[data-v-0dbb0329] {
            display: flex;
            flex-direction: column;
            margin-bottom: 20px;
}
.popup-body-wrapper
        .popup-body-left
        .popup-body-left-wrapper
        .popup-body-top
        .pb-body[data-v-0dbb0329] {
            display: flex;
            flex-direction: column;
}
.popup-body-wrapper
        .popup-body-left
        .popup-body-left-wrapper
        .popup-body-top
        .pb-header
        .pb-header-title[data-v-0dbb0329] {
            margin-bottom: 10px;
}
.popup-body-wrapper
            .popup-body-left
            .popup-body-left-wrapper
            .popup-body-top
            .pb-header
            .pb-header-title
            h1[data-v-0dbb0329] {
                font-size: 30px;
                line-height: 130%;
                color: #161616;
                font-family: SFPD-SemiBold;
}
.popup-body-wrapper
        .popup-body-left
        .popup-body-left-wrapper
        .popup-body-top
        .pb-header
        .pb-header-sourse[data-v-0dbb0329] {
            display: flex;
            justify-content: space-between;
}
.popup-body-left-wrapper
.popup-body-top
.pb-header
.pb-header-sourse
.sourse-left[data-v-0dbb0329] {
    display: flex;
    align-items: center;
}
.popup-body-left
.popup-body-left-wrapper
.popup-body-top
.pb-header
.pb-header-sourse
.sourse-left
.link-home[data-v-0dbb0329] {
    display: flex;
    align-items: center;
}
.popup-body-wrapper
.popup-body-left
.popup-body-left-wrapper
.popup-body-top
.pb-header
.pb-header-sourse
.sourse-left
.link-home
i[data-v-0dbb0329] {
    width: 20px;
    height: 20px;
    display: block;
    margin-right: 5px;
}
.link-home i img[data-v-0dbb0329] {
    display: block;
    width: 100%;
    height: 100%;
}
.popup-body-wrapper
.popup-body-left
.popup-body-left-wrapper
.popup-body-top
.pb-header
.pb-header-sourse
.sourse-right
.action-link[data-v-0dbb0329] {
    display: flex;
    align-items: center;
}
.popup-body-wrapper
    .popup-body-left
    .popup-body-left-wrapper
    .popup-body-top
    .pb-header
    .pb-header-sourse
    .sourse-right
    .action-link
    .act-txt[data-v-0dbb0329] {
        font-size: 13px;
        line-height: 120%;
        color: #1f9ffc;
        font-family: SFPD-SemiBold;
        margin-right: 5px;
}
.popup-body-left-wrapper
.popup-body-top
.pb-header
.pb-header-sourse
.sourse-left
.link-home-txt[data-v-0dbb0329],
.sourse-left
.dot[data-v-0dbb0329],
.sourse-left
.time[data-v-0dbb0329] {
    font-size: 15px;
    line-height: 130%;
    font-family: SFPD-SemiBold;
    color: #8e8e8e;
}
.dot[data-v-0dbb0329] {
    margin: 0 3px;
}
.sourse-left .time[data-v-0dbb0329] {
    font-size: 15px;
    line-height: 130%;
    font-family: SFPD-SemiBold;
    color: #8e8e8e;
}
.popup-body-left-wrapper .popup-body-bottom[data-v-0dbb0329] {
    padding: 20px 0;
    box-sizing: border-box;
    position: relative;
}
.popup-body-bottom[data-v-0dbb0329]::before {
    position: absolute;
    content: "";
    width: 100%;
    height: 1px;
    background: #eeeeee;
    top: 0;
    left: 0;
}
.popup-body-left-wrapper .popup-body-bottom .news-more[data-v-0dbb0329] {
    display: flex;
    flex-direction: column;
    /* padding-bottom: 50px; */
}
.news-more-title[data-v-0dbb0329] {
    font-size: 15px;
    line-height: 20px;
    color: #8e8e8e;
    font-family: SFPD-Regular;
    margin-bottom: 20px;
}
.news-more .list-news[data-v-0dbb0329] {
    display: grid;
    grid-template-columns: repeat(3, 31%);
    grid-row-gap: 30px;
    grid-column-gap: 18px;
}
.list-news .news-item .news-item-wrapper[data-v-0dbb0329] {
    display: flex;
    flex-direction: column;
}
.pb-body .pbc-cover[data-v-0dbb0329] {
    display: flex;
    flex-direction: column;
    margin-bottom: 20px;
}
.popup-body-left
.popup-body-left-wrapper
.popup-body-top
.pb-body
.pbc-cover
.thumb-des[data-v-0dbb0329] {
    margin-top: 20px;
    font-size: 17px;
    line-height: 24px;
    font-family: SFPD-Regular;
    color: #8e8e8e;
}
.pbc-content[data-v-0dbb0329]  > p, .pbc-content[data-v-0dbb0329]  > div {
    font-size: 18px;
    line-height: 140%;
    color: #353535;
    font-family: SFPD-Regular;
    margin-bottom: 15px;
}
.pbc-cover > img[data-v-0dbb0329] {
    width: 100%;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbml0UGFnZXMvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnRuRmFkZUNvbnRlbnQudnVlIiwid2VicGFjazovL2luaXRQYWdlcy8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi9CdG5CbGFuay52dWUiLCJ3ZWJwYWNrOi8vaW5pdFBhZ2VzLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAvUG9wdXBQb3N0LnZ1ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBc0RBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBOzs7QUN0QkE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTs7O0FDZ01BO0lBQ0E7QUFDQTtBQUVBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7QUFFQTtJQUNBO0lBQ0E7QUFDQTtBQUVBO1FBQ0E7QUFDQTtBQUVBO1FBQ0E7QUFDQTtBQUVBO1FBQ0E7UUFDQTtRQUNBO0FBQ0E7QUFFQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO0FBQ0E7QUFFQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO0FBQ0E7QUFFQTs7OztZQUlBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO0FBQ0E7QUFFQTs7Ozs7WUFLQTtZQUNBO1lBQ0E7QUFDQTtBQUVBOzs7OztZQUtBO1lBQ0E7QUFDQTtBQUVBOzs7Ozs7WUFNQTtBQUNBO0FBRUE7Ozs7Ozs7Z0JBT0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7QUFDQTtBQUVBOzs7Ozs7WUFNQTtZQUNBO0FBQ0E7QUFFQTs7Ozs7SUFLQTtJQUNBO0FBQ0E7QUFFQTs7Ozs7OztJQU9BO0lBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7SUFTQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUVBOzs7Ozs7OztJQVFBO0lBQ0E7QUFDQTtBQUVBOzs7Ozs7Ozs7UUFTQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztJQVVBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7QUFFQTtJQUNBO0FBQ0E7QUFFQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0E7QUFFQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtJQUNBO0FBQ0E7QUFFQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7Ozs7OztJQU1BO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7QUFDQTtBQUVBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtBQUNBO0FBRUE7SUFDQTtBQUNBIiwiZmlsZSI6IlBvcHVwUG9zdC5taW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxkaXYgQGNsaWNrPVwidGhpcy5vbkNsaWNrXCJcbiAgICAgICAgIGNsYXNzPVwicGJjLWV4cGFuZFwiXG4gICAgICAgICA6c3R5bGU9XCJbdGhpcy5zdGF0dXMgPyB7IGRpc3BsYXk6ICdub25lJyB9IDogeyBkaXNwbGF5OiAnZmxleCcgfV1cIj5cbiAgICAgICAgPGEgQGNsaWNrPVwib25jbGlja1wiIGNsYXNzPVwiYmxvZy1leHBhbmQtYnRuXCI+XG4gICAgICAgICAgICA8Yj7EkOG7jWMgdGnhur9wPC9iPlxuICAgICAgICAgICAgPGk+XG4gICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjE2XCJcbiAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjEwXCJcbiAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMTYgMTBcIlxuICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XCJNMC4zMzQ3MzUgMC44Mjk1MDVDMC43ODEwNDkgMC4zOTAxNjUgMS41MDQ2NyAwLjM5MDE2NSAxLjk1MDk4IDAuODI5NTA1TDggNi43ODQwMUwxNC4wNDkgMC44Mjk1MDVDMTQuNDk1MyAwLjM5MDE2NSAxNS4yMTkgMC4zOTAxNjUgMTUuNjY1MyAwLjgyOTUwNUMxNi4xMTE2IDEuMjY4ODQgMTYuMTExNiAxLjk4MTE2IDE1LjY2NTMgMi40MjA1TDguODA4MTIgOS4xNzA1QzguMzYxODEgOS42MDk4MyA3LjYzODE5IDkuNjA5ODMgNy4xOTE4OCA5LjE3MDVMMC4zMzQ3MzUgMi40MjA1Qy0wLjExMTU3OCAxLjk4MTE2IC0wLjExMTU3OCAxLjI2ODg0IDAuMzM0NzM1IDAuODI5NTA1WlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMUY5RkZDXCI+PC9wYXRoPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9pPlxuICAgICAgICA8L2E+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogXCJCdG5GYWRlQ29udGVudFwiLFxuICAgICAgICBjb21wb25lbnRzOiB7fSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7IH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBocmVmOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLnBiYy1leHBhbmQge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgei1pbmRleDoxMDAwMDA7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGJvdHRvbTogMDtcclxuICAgICAgICBsZWZ0OiAwO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMjAwcHg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xyXG4gICAgICAgIGN1cnNvcjpwb2ludGVyO1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMCkgMCUsICNmZmZmZmYgMTAwJSk7XHJcbiAgICB9XG5cbiAgICAuYmxvZy1leHBhbmQtYnRuIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgIGhlaWdodDogNDhweDtcbiAgICAgICAgcGFkZGluZzogMCAyNXB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgY29sb3I6ICMxZjlmZmM7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgZ3JpZC1jb2x1bW4tZ2FwOiAxMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjZmZmZmZmIDAlLCAjZjRmOGZmIDEwMCUpO1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAjMWY5ZmZjO1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMTBweCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwcHg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IEBjbGljaz1cInRoaXMub25DbGlja1wiXG4gICAgICAgICBjbGFzcz1cInBiYy1leHBhbmRcIj5cbiAgICAgICAgPGEgIHRhcmdldD1cIl9ibGFua1wiIDp0aXRsZT1cInRoaXMudGl0bGVQb3N0XCIgcmVsPVwibm9mb2xsb3dcIiA6aHJlZj1cInRoaXMuaHJlZlwiIEBjbGljaz1cIm9uY2xpY2tcIiBjbGFzcz1cImJsb2ctZXhwYW5kLWJ0blwiPlxuICAgICAgICAgICAgPGI+xJDhu41jIMSR4bqneSDEkeG7pzwvYj5cbiAgICAgICAgICAgIDxpPlxuICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE0XCIgdmlld0JveD1cIjAgMCAxNSAxNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMi42IDMuNUMyLjQxNDM1IDMuNSAyLjIzNjMgMy41NzM3NSAyLjEwNTAzIDMuNzA1MDNDMS45NzM3NSAzLjgzNjMgMS45IDQuMDE0MzUgMS45IDQuMlYxMS45QzEuOSAxMi4wODU3IDEuOTczNzUgMTIuMjYzNyAyLjEwNTAzIDEyLjM5NUMyLjIzNjMgMTIuNTI2MyAyLjQxNDM1IDEyLjYgMi42IDEyLjZIMTAuM0MxMC40ODU3IDEyLjYgMTAuNjYzNyAxMi41MjYzIDEwLjc5NSAxMi4zOTVDMTAuOTI2MiAxMi4yNjM3IDExIDEyLjA4NTcgMTEgMTEuOVY3LjdDMTEgNy4zMTM0IDExLjMxMzQgNyAxMS43IDdDMTIuMDg2NiA3IDEyLjQgNy4zMTM0IDEyLjQgNy43VjExLjlDMTIuNCAxMi40NTcgMTIuMTc4NyAxMi45OTExIDExLjc4NDkgMTMuMzg0OUMxMS4zOTExIDEzLjc3ODcgMTAuODU3IDE0IDEwLjMgMTRIMi42QzIuMDQzMDQgMTQgMS41MDg5IDEzLjc3ODcgMS4xMTUwOCAxMy4zODQ5QzAuNzIxMjQ5IDEyLjk5MTEgMC41IDEyLjQ1NyAwLjUgMTEuOVY0LjJDMC41IDMuNjQzMDUgMC43MjEyNDkgMy4xMDg5IDEuMTE1MDggMi43MTUwOEMxLjUwODkgMi4zMjEyNSAyLjA0MzA1IDIuMSAyLjYgMi4xSDYuOEM3LjE4NjYgMi4xIDcuNSAyLjQxMzQgNy41IDIuOEM3LjUgMy4xODY2IDcuMTg2NiAzLjUgNi44IDMuNUgyLjZaXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTIuNiAzLjVDMi40MTQzNSAzLjUgMi4yMzYzIDMuNTczNzUgMi4xMDUwMyAzLjcwNTAzQzEuOTczNzUgMy44MzYzIDEuOSA0LjAxNDM1IDEuOSA0LjJWMTEuOUMxLjkgMTIuMDg1NyAxLjk3Mzc1IDEyLjI2MzcgMi4xMDUwMyAxMi4zOTVDMi4yMzYzIDEyLjUyNjMgMi40MTQzNSAxMi42IDIuNiAxMi42SDEwLjNDMTAuNDg1NyAxMi42IDEwLjY2MzcgMTIuNTI2MyAxMC43OTUgMTIuMzk1QzEwLjkyNjIgMTIuMjYzNyAxMSAxMi4wODU3IDExIDExLjlWNy43QzExIDcuMzEzNCAxMS4zMTM0IDcgMTEuNyA3QzEyLjA4NjYgNyAxMi40IDcuMzEzNCAxMi40IDcuN1YxMS45QzEyLjQgMTIuNDU3IDEyLjE3ODcgMTIuOTkxMSAxMS43ODQ5IDEzLjM4NDlDMTEuMzkxMSAxMy43Nzg3IDEwLjg1NyAxNCAxMC4zIDE0SDIuNkMyLjA0MzA0IDE0IDEuNTA4OSAxMy43Nzg3IDEuMTE1MDggMTMuMzg0OUMwLjcyMTI0OSAxMi45OTExIDAuNSAxMi40NTcgMC41IDExLjlWNC4yQzAuNSAzLjY0MzA1IDAuNzIxMjQ5IDMuMTA4OSAxLjExNTA4IDIuNzE1MDhDMS41MDg5IDIuMzIxMjUgMi4wNDMwNSAyLjEgMi42IDIuMUg2LjhDNy4xODY2IDIuMSA3LjUgMi40MTM0IDcuNSAyLjhDNy41IDMuMTg2NiA3LjE4NjYgMy41IDYuOCAzLjVIMi42WlwiIGZpbGw9XCIjMUY5RkZDXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTguOSAwLjdDOC45IDAuMzEzNDAxIDkuMjEzNCAyLjA4NjE2ZS0wOCA5LjYgMi4wODYxNmUtMDhIMTMuOEMxNC4xODY2IDIuMDg2MTZlLTA4IDE0LjUgMC4zMTM0MDEgMTQuNSAwLjdWNC45QzE0LjUgNS4yODY2IDE0LjE4NjYgNS42IDEzLjggNS42QzEzLjQxMzQgNS42IDEzLjEgNS4yODY2IDEzLjEgNC45VjEuNEg5LjZDOS4yMTM0IDEuNCA4LjkgMS4wODY2IDguOSAwLjdaXCIgZmlsbD1cIndoaXRlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTguOSAwLjdDOC45IDAuMzEzNDAxIDkuMjEzNCAyLjA4NjE2ZS0wOCA5LjYgMi4wODYxNmUtMDhIMTMuOEMxNC4xODY2IDIuMDg2MTZlLTA4IDE0LjUgMC4zMTM0MDEgMTQuNSAwLjdWNC45QzE0LjUgNS4yODY2IDE0LjE4NjYgNS42IDEzLjggNS42QzEzLjQxMzQgNS42IDEzLjEgNS4yODY2IDEzLjEgNC45VjEuNEg5LjZDOS4yMTM0IDEuNCA4LjkgMS4wODY2IDguOSAwLjdaXCIgZmlsbD1cIiMxRjlGRkNcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCIgY2xpcC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMTQuMjk1IDAuMjA1MDI1QzE0LjU2ODMgMC40NzgzOTIgMTQuNTY4MyAwLjkyMTYwOCAxNC4yOTUgMS4xOTQ5N0w3Ljk5NDk3IDcuNDk0OTdDNy43MjE2MSA3Ljc2ODM0IDcuMjc4MzkgNy43NjgzNCA3LjAwNTAyIDcuNDk0OTdDNi43MzE2NiA3LjIyMTYxIDYuNzMxNjYgNi43NzgzOSA3LjAwNTAyIDYuNTA1MDNMMTMuMzA1IDAuMjA1MDI1QzEzLjU3ODQgLTAuMDY4MzQxOCAxNC4wMjE2IC0wLjA2ODM0MTggMTQuMjk1IDAuMjA1MDI1WlwiIGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBjbGlwLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0xNC4yOTUgMC4yMDUwMjVDMTQuNTY4MyAwLjQ3ODM5MiAxNC41NjgzIDAuOTIxNjA4IDE0LjI5NSAxLjE5NDk3TDcuOTk0OTcgNy40OTQ5N0M3LjcyMTYxIDcuNzY4MzQgNy4yNzgzOSA3Ljc2ODM0IDcuMDA1MDIgNy40OTQ5N0M2LjczMTY2IDcuMjIxNjEgNi43MzE2NiA2Ljc3ODM5IDcuMDA1MDIgNi41MDUwM0wxMy4zMDUgMC4yMDUwMjVDMTMuNTc4NCAtMC4wNjgzNDE4IDE0LjAyMTYgLTAuMDY4MzQxOCAxNC4yOTUgMC4yMDUwMjVaXCIgZmlsbD1cIiMxRjlGRkNcIiAvPlxuICAgICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgPC9pPlxuICAgICAgICA8L2E+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogXCJCdG5CdG5CbGFua1wiLFxuICAgICAgICBjb21wb25lbnRzOiB7fSxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7IH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdHVzOiB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaHJlZjoge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZVBvc3Q6IHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF0YSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICfEkOG7jWMgxJHhuqd5IMSR4bunJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgb25jbGljazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2RvY3VtZW50LnRpdGxlID0gdGhpcy50aXRsZVBvc3RcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3Blbih0aGlzLmhyZWYsICdfYmxhbmsnKTtcclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlZCgpIHtcbiAgICAgICAgfVxuICAgIH07XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICAucGJjLWV4cGFuZCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAyMDBweDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKSAwJSwgI2ZmZmZmZiAxMDAlKTtcbiAgICB9XG5cbiAgICAuYmxvZy1leHBhbmQtYnRuIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgICAgIGhlaWdodDogNDhweDtcbiAgICAgICAgcGFkZGluZzogMCAyNXB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgY29sb3I6ICMxZjlmZmM7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgZ3JpZC1jb2x1bW4tZ2FwOiAxMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCAjZmZmZmZmIDAlLCAjZjRmOGZmIDEwMCUpO1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAjMWY5ZmZjO1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBib3gtc2hhZG93OiAwcHggMTBweCAyMHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwcHg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IHYtaWY9XCJ0aGlzLmRldGFpbCE9bnVsbFwiIDpkYXRhLWlkPVwidGhpcy5kZXRhaWwuaWRcIiBjbGFzcz1cInBlZ2EtcG9wdXAtd3JhcHBlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtYm9keS13cmFwcGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtYm9keS1sZWZ0XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcHVwLWJvZHktbGVmdC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3B1cC1ib2R5LXRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBiLWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYi1oZWFkZXItdGl0bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxIDp0aXRsZT1cInRoaXMuZGV0YWlsLnRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3RoaXMuZGV0YWlsLnRpdGxlfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtaWQtc291cmNlPVwidGhpcy5kZXRhaWwuZG9tYWluLmlkXCIgY2xhc3M9XCJwYi1oZWFkZXItc291cnNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzb3Vyc2UtbGVmdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJsaW5rLWhvbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImxvZ28taG9tZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9XCJ0aGlzLmRldGFpbC5kb21haW4uaW1hZ2VcIiBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpbmstaG9tZS10eHRcIj57e3RoaXMuZGV0YWlsLmRvbWFpbi5uYW1lfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRvdFwiPi48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRpbWVcIiA6dGltZT1cInRoaXMuZGV0YWlsLnB1Ymxpc2hfdGltZVwiPnt7dGhpcy5uZXdUaW1lfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic291cnNlLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSA6dGl0bGU9XCJ0aGlzLmRldGFpbC50aXRsZVwiIEBjbGljaz1cInRoaXMuYmxhbmtcIiA6aHJlZj1cInRoaXMuZGV0YWlsLnVybFwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vZm9sbG93XCIgY2xhc3M9XCJhY3Rpb24tbGlua1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYWN0LXR4dFwiPkxpbmsgYsOgaSB2aeG6v3Q8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY21cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyB3aWR0aD1cIjEwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCIxMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAxMCAxMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVwiTTEuNSAyLjVDMS4zNjczOSAyLjUgMS4yNDAyMSAyLjU1MjY4IDEuMTQ2NDUgMi42NDY0NUMxLjA1MjY4IDIuNzQwMjEgMSAyLjg2NzM5IDEgM1Y4LjVDMSA4LjYzMjYxIDEuMDUyNjggOC43NTk3OSAxLjE0NjQ1IDguODUzNTVDMS4yNDAyMSA4Ljk0NzMyIDEuMzY3MzkgOSAxLjUgOUg3QzcuMTMyNjEgOSA3LjI1OTc4IDguOTQ3MzIgNy4zNTM1NSA4Ljg1MzU1QzcuNDQ3MzIgOC43NTk3OCA3LjUgOC42MzI2MSA3LjUgOC41VjUuNUM3LjUgNS4yMjM4NiA3LjcyMzg2IDUgOCA1QzguMjc2MTQgNSA4LjUgNS4yMjM4NiA4LjUgNS41VjguNUM4LjUgOC44OTc4MyA4LjM0MTk2IDkuMjc5MzYgOC4wNjA2NiA5LjU2MDY2QzcuNzc5MzUgOS44NDE5NiA3LjM5NzgyIDEwIDcgMTBIMS41QzEuMTAyMTcgMTAgMC43MjA2NDQgOS44NDE5NiAwLjQzOTM0IDkuNTYwNjZDMC4xNTgwMzUgOS4yNzkzNiAwIDguODk3ODMgMCA4LjVWM0MwIDIuNjAyMTggMC4xNTgwMzUgMi4yMjA2NCAwLjQzOTM0IDEuOTM5MzRDMC43MjA2NDQgMS42NTgwNCAxLjEwMjE4IDEuNSAxLjUgMS41SDQuNUM0Ljc3NjE0IDEuNSA1IDEuNzIzODYgNSAyQzUgMi4yNzYxNCA0Ljc3NjE0IDIuNSA0LjUgMi41SDEuNVpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCI+PC9wYXRoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XCJNMS41IDIuNUMxLjM2NzM5IDIuNSAxLjI0MDIxIDIuNTUyNjggMS4xNDY0NSAyLjY0NjQ1QzEuMDUyNjggMi43NDAyMSAxIDIuODY3MzkgMSAzVjguNUMxIDguNjMyNjEgMS4wNTI2OCA4Ljc1OTc5IDEuMTQ2NDUgOC44NTM1NUMxLjI0MDIxIDguOTQ3MzIgMS4zNjczOSA5IDEuNSA5SDdDNy4xMzI2MSA5IDcuMjU5NzggOC45NDczMiA3LjM1MzU1IDguODUzNTVDNy40NDczMiA4Ljc1OTc4IDcuNSA4LjYzMjYxIDcuNSA4LjVWNS41QzcuNSA1LjIyMzg2IDcuNzIzODYgNSA4IDVDOC4yNzYxNCA1IDguNSA1LjIyMzg2IDguNSA1LjVWOC41QzguNSA4Ljg5NzgzIDguMzQxOTYgOS4yNzkzNiA4LjA2MDY2IDkuNTYwNjZDNy43NzkzNSA5Ljg0MTk2IDcuMzk3ODIgMTAgNyAxMEgxLjVDMS4xMDIxNyAxMCAwLjcyMDY0NCA5Ljg0MTk2IDAuNDM5MzQgOS41NjA2NkMwLjE1ODAzNSA5LjI3OTM2IDAgOC44OTc4MyAwIDguNVYzQzAgMi42MDIxOCAwLjE1ODAzNSAyLjIyMDY0IDAuNDM5MzQgMS45MzkzNEMwLjcyMDY0NCAxLjY1ODA0IDEuMTAyMTggMS41IDEuNSAxLjVINC41QzQuNzc2MTQgMS41IDUgMS43MjM4NiA1IDJDNSAyLjI3NjE0IDQuNzc2MTQgMi41IDQuNSAyLjVIMS41WlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwiIzFGOUZGQ1wiPjwvcGF0aD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVwiTTYgMC41QzYgMC4yMjM4NTggNi4yMjM4NiAxLjQ5MDEyZS0wOCA2LjUgMS40OTAxMmUtMDhIOS41QzkuNzc2MTQgMS40OTAxMmUtMDggMTAgMC4yMjM4NTggMTAgMC41VjMuNUMxMCAzLjc3NjE0IDkuNzc2MTQgNCA5LjUgNEM5LjIyMzg2IDQgOSAzLjc3NjE0IDkgMy41VjFINi41QzYuMjIzODYgMSA2IDAuNzc2MTQyIDYgMC41WlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIj48L3BhdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk02IDAuNUM2IDAuMjIzODU4IDYuMjIzODYgMS40OTAxMmUtMDggNi41IDEuNDkwMTJlLTA4SDkuNUM5Ljc3NjE0IDEuNDkwMTJlLTA4IDEwIDAuMjIzODU4IDEwIDAuNVYzLjVDMTAgMy43NzYxNCA5Ljc3NjE0IDQgOS41IDRDOS4yMjM4NiA0IDkgMy43NzYxNCA5IDMuNVYxSDYuNUM2LjIyMzg2IDEgNiAwLjc3NjE0MiA2IDAuNVpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiMxRjlGRkNcIj48L3BhdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXAtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cIk05Ljg1MzU1IDAuMTQ2NDQ3QzEwLjA0ODggMC4zNDE3MDkgMTAuMDQ4OCAwLjY1ODI5MSA5Ljg1MzU1IDAuODUzNTUzTDUuMzUzNTUgNS4zNTM1NUM1LjE1ODI5IDUuNTQ4ODIgNC44NDE3MSA1LjU0ODgyIDQuNjQ2NDUgNS4zNTM1NUM0LjQ1MTE4IDUuMTU4MjkgNC40NTExOCA0Ljg0MTcxIDQuNjQ2NDUgNC42NDY0NUw5LjE0NjQ1IDAuMTQ2NDQ3QzkuMzQxNzEgLTAuMDQ4ODE1NSA5LjY1ODI5IC0wLjA0ODgxNTUgOS44NTM1NSAwLjE0NjQ0N1pcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCI+PC9wYXRoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwLXJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XCJNOS44NTM1NSAwLjE0NjQ0N0MxMC4wNDg4IDAuMzQxNzA5IDEwLjA0ODggMC42NTgyOTEgOS44NTM1NSAwLjg1MzU1M0w1LjM1MzU1IDUuMzUzNTVDNS4xNTgyOSA1LjU0ODgyIDQuODQxNzEgNS41NDg4MiA0LjY0NjQ1IDUuMzUzNTVDNC40NTExOCA1LjE1ODI5IDQuNDUxMTggNC44NDE3MSA0LjY0NjQ1IDQuNjQ2NDVMOS4xNDY0NSAwLjE0NjQ0N0M5LjM0MTcxIC0wLjA0ODgxNTUgOS42NTgyOSAtMC4wNDg4MTU1IDkuODUzNTUgMC4xNDY0NDdaXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMUY5RkZDXCI+PC9wYXRoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIC8vL2NvbnRlbnQgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJlZj1cImZhZGVcIiBjbGFzcz1cInBiLWJvZHkgYm9keS1jb2xsYXBzZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGJjLWNvdmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgYWx0PVwiXCIgOnNyYz1cInRoaXMuZGV0YWlsLmltYWdlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGh1bWItZGVzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e3RoaXMuZGV0YWlsLnNhcG99fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWR2U2FwbyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYmMtY29udGVudFwiIHYtaHRtbD1cInRoaXMuZGV0YWlsLmJvZHlcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdG5GYWRlQ29udGVudCB2LWlmPVwidGhpcy5kZXRhaWwuYXJ0aWNsZV90eXBlID09IDFcIiA6dHlwZT1cInRoaXMuZGV0YWlsLmFydGljbGVfdHlwZVwiIDpzdGF0dXM9XCJ0aGlzLnNob3dDb250ZW50XCIgOm9uQ2xpY2s9XCJzaG93QWxsXCIgOmhyZWY9XCJ0aGlzLmRldGFpbC51cmxcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdG5CbGFuayB2LWVsc2UgOnN0YXR1cz1cImZhbHNlXCIgOmhyZWY9XCJ0aGlzLmRldGFpbC51cmxcIiA6dGl0bGVQb3N0PVwidGhpcy5kZXRhaWwudGl0bGVcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWR2UG9wdXBPbkltYWdlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QWR2UG9wdXBBcnRpY2xlIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvcHVwLWJvZHktYm90dG9tXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmV3cy1tb3JlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5ld3MtbW9yZS10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW4gbGnDqm4gcXVhbjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJsaXN0LW5ld3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwibmV3cy1pdGVtXCIgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gdGhpcy5yZWxhdGVkRGV0YWlsXCIgOmtleT1cImluZGV4XCIgOmRhdGEtaWQ9XCJpdGVtLmlkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmV3cy1pdGVtLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2FyZFRleHRCb3R0b20gOmRhdGE9XCJpdGVtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wZW5Qb3B1cD1cIihlKSA9PiBnZXRUaGlzLmNoYW5nZURhdGEoZSxpdGVtLmlkKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzaXplVGl0bGU9XCIxM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZVRodW1iPVwieyB3aWR0aDogJzE4NnB4JywgbWFyZ2luQm90dG9tOiAnOHB4JyB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmxpbmU9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJzbWFsbFRodW1iXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWR2VHFsIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9wdXAtYm9keS1yaWdodFwiPlxuICAgICAgICAgICAgICAgIDxBZHZQb3B1cFJpZ2h0MSAvPlxuICAgICAgICAgICAgICAgIDxBZHZQb3B1cFJpZ2h0MiAvPlxuICAgICAgICAgICAgICAgIDxBZHZQb3B1cFJpZ2h0MyAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgICBpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuICAgIGltcG9ydCB7IGFwaVdlYiB9IGZyb20gJ0AvdXRpbHMvY29tbW9uLmpzJztcbiAgICBpbXBvcnQgeyBjb21tb25IZWxwZXIgfSBmcm9tICdAL3V0aWxzL2hlbHBlci5qcyc7XG5cbiAgICBpbXBvcnQgQ2FyZFRleHRCb3R0b20gZnJvbSBcIkAvY29tcG9uZW50cy9DYXJkL0NhcmRUZXh0Qm90dG9tXCI7XG4gICAgaW1wb3J0IEJ0bkZhZGVDb250ZW50IGZyb20gXCJAL2NvbXBvbmVudHMvQnV0dG9uL0J0bkZhZGVDb250ZW50XCI7XG4gICAgaW1wb3J0IEJ0bkJsYW5rIGZyb20gXCJAL2NvbXBvbmVudHMvQnV0dG9uL0J0bkJsYW5rXCI7XG4gICAgaW1wb3J0IEFkdlBvcHVwUmlnaHQxIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlBvcHVwUmlnaHQxXCI7XG4gICAgaW1wb3J0IEFkdlBvcHVwUmlnaHQyIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlBvcHVwUmlnaHQyXCI7XG4gICAgaW1wb3J0IEFkdlBvcHVwUmlnaHQzIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlBvcHVwUmlnaHQzXCI7XG4gICAgaW1wb3J0IEFkdlBvcHVwT25JbWFnZSBmcm9tIFwiQC9jb21wb25lbnRzL0Jhbm5lci9BZHZQb3B1cE9uSW1hZ2VcIjtcbiAgICBpbXBvcnQgQWR2UG9wdXBBcnRpY2xlIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlBvcHVwQXJ0aWNsZVwiO1xuICAgIGltcG9ydCBBZHZTYXBvIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlNhcG9cIjtcbiAgICBpbXBvcnQgQWR2VHFsIGZyb20gXCJAL2NvbXBvbmVudHMvQmFubmVyL0FkdlRxbFwiO1xuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogXCJQb3B1cFBvc3RcIixcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGRhdGFJZDoge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZToge31cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgQ2FyZFRleHRCb3R0b20sXG4gICAgICAgICAgICBCdG5GYWRlQ29udGVudCwgQnRuQmxhbmssIEFkdlBvcHVwUmlnaHQxLCBBZHZQb3B1cFJpZ2h0MiwgQWR2UG9wdXBSaWdodDMsXG4gICAgICAgICAgICBBZHZQb3B1cE9uSW1hZ2UsIEFkdlRxbCwgQWR2UG9wdXBBcnRpY2xlLCBBZHZTYXBvXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNob3dDb250ZW50OiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZWxhdGVkRGV0YWlsOiBudWxsLFxuICAgICAgICAgICAgICAgIGRldGFpbDogbnVsbCxcbiAgICAgICAgICAgICAgICBuZXdUaW1lOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgY29tcHV0ZWQ6IHtcbiAgICAgICAgICAgIGdldFRoaXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1ldGhvZHM6IHtcbiAgICAgICAgICAgIHNob3dBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gdGhpcy4kcmVmc1tcImZhZGVcIl07XG4gICAgICAgICAgICAgICAgZG9tLmNsYXNzTGlzdC5yZW1vdmUoXCJib2R5LWNvbGxhcHNlZFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFuZ2VEYXRhOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgIGxldCBkZXRhaWwgPSBheGlvcyhhcGlXZWIuZGV0YWlsKHRoaXMuJHJvb3QuYnVpbGRNZXRob2QuZG9tYWluQXBpLCBkYXRhKSk7XG4gICAgICAgICAgICAgICAgZGV0YWlsLnRoZW4ocnMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL3F14bqjbmcgY8OhbyBhcnRpY2xlIHBvcHVwXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkhlbHBlci5hcHBlbmRBZHMoXCJra2M5cXV2OFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkdl9wb3B1cF9BcnRpY2xlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgLy9xdeG6o25nIGPDoW8gYXJ0aWNsZSBwb3B1cFxuICAgICAgICAgICAgICAgICAgICBjb21tb25IZWxwZXIuYXBwZW5kQWRzKFwia2tjOXF1djhcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZHZfcG9wdXBfQXJ0aWNsZVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vcXXhuqNuZyBjw6FvIHJpZ2h0MSBwb3B1cFxuICAgICAgICAgICAgICAgICAgICBjb21tb25IZWxwZXIuYXBwZW5kQWRzKFwia2ttOWlxN2NcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZHZfcG9wdXBSaWdodDFcIikpO1xuICAgICAgICAgICAgICAgICAgICAvL3F14bqjbmcgY8OhbyByaWdodDIgcG9wdXBcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uSGVscGVyLmFwcGVuZEFkcyhcImtrbTlremhmXCIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWR2X3BvcHVwUmlnaHQyXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgLy9xdeG6o25nIGPDoW8gcmlnaHQzIHBvcHVwXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkhlbHBlci5hcHBlbmRBZHMoXCJra205cmJocVwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkdl9wb3B1cFJpZ2h0M1wiKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vcXXhuqNuZyBjw6FvIHRvcCBwb3B1cFxuICAgICAgICAgICAgICAgICAgICBjb21tb25IZWxwZXIuYXBwZW5kQWRzKFwia2ttOWc1YzNcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZHZfcG9wdXBUb3BcIikpO1xuICAgICAgICAgICAgICAgICAgICAvL3F14bqjbmcgY8OhbyBzYXBvIHBvcHVwXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbkhlbHBlci5hcHBlbmRBZHMoXCJra2M5cGQ1MFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkdl9zYXBvXCIpKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFpbCA9IHJzLmRhdGEuZGF0YVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kZWwuY2xvc2VzdCgnLndyYXBQb3B1cCcpICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuY2xvc2VzdCgnLndyYXBQb3B1cCcpLnNjcm9sbFRvKHsgdG9wOiAwIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuY2xvc2VzdCgnLndyYXBQb3B1cE92ZXJsb2FkJykuc2Nyb2xsVG8oeyB0b3A6IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBycy5kYXRhLmRhdGEudGl0bGVcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHJzLmRhdGEuZGF0YSwgJ3BvcHVwJywgY29tbW9uSGVscGVyLmJ1aWxkSHJlZkRldGFpbCh0aGlzLmRldGFpbC50aXRsZSwgdGhpcy5kZXRhaWwuaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRvbSA9IHRoaXMuJHJlZnNbXCJmYWRlXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmNsYXNzTGlzdC5hZGQoXCJib2R5LWNvbGxhcHNlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuYnVpbGRNZXRob2QucG9wdXBMb2FkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuYnVpbGRNZXRob2QucG9wdXBSZWxhdGVkTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBibGFuazogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICAgICAgICAvL3RoaXMuJHJvb3QudGl0bGVQYWdlID0gdGhpcy5kZXRhaWwudGl0bGVcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbih0aGlzLmRldGFpbC51cmwsICdfYmxhbmsnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW91bnRlZCgpIHtcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBjb21tb25IZWxwZXIuY2hlY2tKd3QodGhpcy4kcm9vdC51c2VyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGV0YWlsID0gYXhpb3MoYXBpV2ViLmRldGFpbCh0aGlzLiRyb290LmJ1aWxkTWV0aG9kLmRvbWFpbkFwaSwgdGhpcy5kYXRhSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsLnRoZW4ocnMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJzLmRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlsID0gcnMuZGF0YS5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBycy5kYXRhLmRhdGEudGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuYnVpbGRNZXRob2QucG9wdXBMb2FkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbkhlbHBlci5nZXRLaW5nVG9rZW4odGsgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlvcyhhcGlXZWIucmVsYXRlZE5ld3ModGhpcy4kcm9vdC5idWlsZE1ldGhvZC5kb21haW5BcGksIGNvbmZpZ1swXSwgY29uZmlnWzFdLCB0aGlzLmRhdGFJZCksIGNvbW1vbkhlbHBlci5nZXRIZWFkZXIodGspKS50aGVuKHJzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChycy5kYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbGF0ZWREZXRhaWwgPSBycy5kYXRhLmRhdGEuc2xpY2UoMCwgNilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuYnVpbGRNZXRob2QucG9wdXBSZWxhdGVkTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJyZWxhdGVkTmV3cyBudWxsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4geyBjb25zb2xlLmVycm9yKGUpIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy4kcm9vdC5idWlsZE1ldGhvZC5kb21haW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0KC8qIHdlYnBhY2tDaHVua05hbWU6IFwibW9tZW50XCIgKi8gJ21vbWVudCcpLnRoZW4oKHsgZGVmYXVsdDogbW9tZW50IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9tZW50LmxvY2FsZSgndmknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXdUaW1lID0gbW9tZW50KHRoaXMuZGV0YWlsLnB1Ymxpc2hfdGltZSAqIDEwMDApLnN0YXJ0T2YoJ2hvdXInKS5mcm9tTm93KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiRyb290LmJ1aWxkTWV0aG9kLmlkID09IDAgfHwgdGhpcy4kcm9vdC5jYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUocnMuZGF0YS5kYXRhLCAncG9wdXAnLCBjb21tb25IZWxwZXIuYnVpbGRIcmVmRGV0YWlsKHRoaXMuZGV0YWlsLnRpdGxlLCB0aGlzLmRldGFpbC5pZCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZGV0YWlsIG51bGwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChlID0+IHsgY29uc29sZS5lcnJvcihlKSB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWlsID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IHRoaXMuc3RhdGUudGl0bGU7XG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LmJ1aWxkTWV0aG9kLnBvcHVwTG9hZGVkKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjb21tb25IZWxwZXIuZ2V0S2luZ1Rva2VuKHRrID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXhpb3MoYXBpV2ViLnJlbGF0ZWROZXdzKHRoaXMuJHJvb3QuYnVpbGRNZXRob2QuZG9tYWluQXBpLCBjb25maWdbMF0sIGNvbmZpZ1sxXSwgdGhpcy5kYXRhSWQpLCBjb21tb25IZWxwZXIuZ2V0SGVhZGVyKHRrKSkudGhlbihycyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnMuZGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxhdGVkRGV0YWlsID0gcnMuZGF0YS5kYXRhLnNsaWNlKDAsIDYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LmJ1aWxkTWV0aG9kLnBvcHVwUmVsYXRlZExvYWRlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93WSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjE3cHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInJlbGF0ZWROZXdzIG51bGxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZSA9PiB7IGNvbnNvbGUuZXJyb3IoZSkgfSlcbiAgICAgICAgICAgICAgICB9LCB0aGlzLiRyb290LmJ1aWxkTWV0aG9kLmRvbWFpbilcbiAgICAgICAgICAgICAgICBpbXBvcnQoLyogd2VicGFja0NodW5rTmFtZTogXCJtb21lbnRcIiAqLyAnbW9tZW50JykudGhlbigoeyBkZWZhdWx0OiBtb21lbnQgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb21lbnQubG9jYWxlKCd2aScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5ld1RpbWUgPSBtb21lbnQodGhpcy5kZXRhaWwucHVibGlzaF90aW1lICogMTAwMCkuc3RhcnRPZignaG91cicpLmZyb21Ob3coKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlZCgpIHtcbiAgICAgICAgfVxuICAgIH07PC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLnBvcHVwLWJvZHktd3JhcHBlciB7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCA1MDBtcyBlYXNlO1xuICAgIH1cblxuICAgIC5wYi1ib2R5LmJvZHktY29sbGFwc2VkIC5wYmMtY29udGVudCB7XG4gICAgICAgIG1heC1oZWlnaHQ6IDUwdmg7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMC4zcztcbiAgICB9XG5cbiAgICAucG9wdXAtYm9keS13cmFwcGVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIH1cblxuICAgICAgICAucG9wdXAtYm9keS13cmFwcGVyIC5wb3B1cC1ib2R5LWxlZnQge1xuICAgICAgICAgICAgbWF4LXdpZHRoOiA3NjBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXIgLnBvcHVwLWJvZHktcmlnaHQge1xuICAgICAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnBvcHVwLWJvZHktd3JhcHBlciAucG9wdXAtYm9keS1sZWZ0IC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlciB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIDgwcHg7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXIgLnBvcHVwLWJvZHktbGVmdCAucG9wdXAtYm9keS1sZWZ0LXdyYXBwZXI6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDFweDtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDkwJTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlZWVlO1xuICAgICAgICAgICAgICAgIHRvcDogLTQwcHg7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXIgLnBvcHVwLWJvZHktbGVmdCAucG9wdXAtYm9keS1sZWZ0LXdyYXBwZXIgLnBvcHVwLWJvZHktdG9wIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnRcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgICAgICAgICAgLnBvcHVwLWJvZHktYm90dG9tOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNlZWVlZWU7XG4gICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnRcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgICAgICAgICAgLnBvcHVwLWJvZHktdG9wXG4gICAgICAgICAgICAucGItaGVhZGVyIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnBvcHVwLWJvZHktd3JhcHBlclxuICAgICAgICAgICAgLnBvcHVwLWJvZHktbGVmdFxuICAgICAgICAgICAgLnBvcHVwLWJvZHktbGVmdC13cmFwcGVyXG4gICAgICAgICAgICAucG9wdXAtYm9keS10b3BcbiAgICAgICAgICAgIC5wYi1ib2R5IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnRcbiAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgICAgICAgICAgLnBvcHVwLWJvZHktdG9wXG4gICAgICAgICAgICAucGItaGVhZGVyXG4gICAgICAgICAgICAucGItaGVhZGVyLXRpdGxlIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLnBvcHVwLWJvZHktd3JhcHBlclxuICAgICAgICAgICAgICAgIC5wb3B1cC1ib2R5LWxlZnRcbiAgICAgICAgICAgICAgICAucG9wdXAtYm9keS1sZWZ0LXdyYXBwZXJcbiAgICAgICAgICAgICAgICAucG9wdXAtYm9keS10b3BcbiAgICAgICAgICAgICAgICAucGItaGVhZGVyXG4gICAgICAgICAgICAgICAgLnBiLWhlYWRlci10aXRsZVxuICAgICAgICAgICAgICAgIGgxIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMTMwJTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMxNjE2MTY7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBTRlBELVNlbWlCb2xkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnBvcHVwLWJvZHktd3JhcHBlclxuICAgICAgICAgICAgLnBvcHVwLWJvZHktbGVmdFxuICAgICAgICAgICAgLnBvcHVwLWJvZHktbGVmdC13cmFwcGVyXG4gICAgICAgICAgICAucG9wdXAtYm9keS10b3BcbiAgICAgICAgICAgIC5wYi1oZWFkZXJcbiAgICAgICAgICAgIC5wYi1oZWFkZXItc291cnNlIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgIC5wb3B1cC1ib2R5LXRvcFxuICAgIC5wYi1oZWFkZXJcbiAgICAucGItaGVhZGVyLXNvdXJzZVxuICAgIC5zb3Vyc2UtbGVmdCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnBvcHVwLWJvZHktbGVmdFxuICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgIC5wb3B1cC1ib2R5LXRvcFxuICAgIC5wYi1oZWFkZXJcbiAgICAucGItaGVhZGVyLXNvdXJzZVxuICAgIC5zb3Vyc2UtbGVmdFxuICAgIC5saW5rLWhvbWUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAucG9wdXAtYm9keS1sZWZ0XG4gICAgLnBvcHVwLWJvZHktbGVmdC13cmFwcGVyXG4gICAgLnBvcHVwLWJvZHktdG9wXG4gICAgLnBiLWhlYWRlclxuICAgIC5wYi1oZWFkZXItc291cnNlXG4gICAgLnNvdXJzZS1sZWZ0XG4gICAgLmxpbmstaG9tZVxuICAgIGkge1xuICAgICAgICB3aWR0aDogMjBweDtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgfVxuXG4gICAgLmxpbmstaG9tZSBpIGltZyB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAucG9wdXAtYm9keS1sZWZ0XG4gICAgLnBvcHVwLWJvZHktbGVmdC13cmFwcGVyXG4gICAgLnBvcHVwLWJvZHktdG9wXG4gICAgLnBiLWhlYWRlclxuICAgIC5wYi1oZWFkZXItc291cnNlXG4gICAgLnNvdXJzZS1yaWdodFxuICAgIC5hY3Rpb24tbGluayB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgICAgIC5wb3B1cC1ib2R5LXdyYXBwZXJcbiAgICAgICAgLnBvcHVwLWJvZHktbGVmdFxuICAgICAgICAucG9wdXAtYm9keS1sZWZ0LXdyYXBwZXJcbiAgICAgICAgLnBvcHVwLWJvZHktdG9wXG4gICAgICAgIC5wYi1oZWFkZXJcbiAgICAgICAgLnBiLWhlYWRlci1zb3Vyc2VcbiAgICAgICAgLnNvdXJzZS1yaWdodFxuICAgICAgICAuYWN0aW9uLWxpbmtcbiAgICAgICAgLmFjdC10eHQge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEyMCU7XG4gICAgICAgICAgICBjb2xvcjogIzFmOWZmYztcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBTRlBELVNlbWlCb2xkO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlclxuICAgIC5wb3B1cC1ib2R5LXRvcFxuICAgIC5wYi1oZWFkZXJcbiAgICAucGItaGVhZGVyLXNvdXJzZVxuICAgIC5zb3Vyc2UtbGVmdFxuICAgIC5saW5rLWhvbWUtdHh0LFxuICAgIC5zb3Vyc2UtbGVmdFxuICAgIC5kb3QsXG4gICAgLnNvdXJzZS1sZWZ0XG4gICAgLnRpbWUge1xuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxMzAlO1xuICAgICAgICBmb250LWZhbWlseTogU0ZQRC1TZW1pQm9sZDtcbiAgICAgICAgY29sb3I6ICM4ZThlOGU7XG4gICAgfVxuXG4gICAgLmRvdCB7XG4gICAgICAgIG1hcmdpbjogMCAzcHg7XG4gICAgfVxuXG4gICAgLnNvdXJzZS1sZWZ0IC50aW1lIHtcbiAgICAgICAgZm9udC1zaXplOiAxNXB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMTMwJTtcbiAgICAgICAgZm9udC1mYW1pbHk6IFNGUEQtU2VtaUJvbGQ7XG4gICAgICAgIGNvbG9yOiAjOGU4ZThlO1xuICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LWxlZnQtd3JhcHBlciAucG9wdXAtYm9keS1ib3R0b20ge1xuICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG5cbiAgICAucG9wdXAtYm9keS1ib3R0b206OmJlZm9yZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlZWVlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgfVxuXG4gICAgLnBvcHVwLWJvZHktbGVmdC13cmFwcGVyIC5wb3B1cC1ib2R5LWJvdHRvbSAubmV3cy1tb3JlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgLyogcGFkZGluZy1ib3R0b206IDUwcHg7ICovXG4gICAgfVxuXG4gICAgLm5ld3MtbW9yZS10aXRsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgICAgIGNvbG9yOiAjOGU4ZThlO1xuICAgICAgICBmb250LWZhbWlseTogU0ZQRC1SZWd1bGFyO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cblxuICAgIC5uZXdzLW1vcmUgLmxpc3QtbmV3cyB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDMxJSk7XG4gICAgICAgIGdyaWQtcm93LWdhcDogMzBweDtcbiAgICAgICAgZ3JpZC1jb2x1bW4tZ2FwOiAxOHB4O1xuICAgIH1cblxuICAgIC5saXN0LW5ld3MgLm5ld3MtaXRlbSAubmV3cy1pdGVtLXdyYXBwZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIH1cblxuICAgIC5wYi1ib2R5IC5wYmMtY292ZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgIH1cblxuICAgIC5wb3B1cC1ib2R5LWxlZnRcbiAgICAucG9wdXAtYm9keS1sZWZ0LXdyYXBwZXJcbiAgICAucG9wdXAtYm9keS10b3BcbiAgICAucGItYm9keVxuICAgIC5wYmMtY292ZXJcbiAgICAudGh1bWItZGVzIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICAgICAgZm9udC1zaXplOiAxN3B4O1xuICAgICAgICBsaW5lLWhlaWdodDogMjRweDtcbiAgICAgICAgZm9udC1mYW1pbHk6IFNGUEQtUmVndWxhcjtcbiAgICAgICAgY29sb3I6ICM4ZThlOGU7XG4gICAgfVxuXG4gICAgLnBiYy1jb250ZW50IDo6di1kZWVwID4gcCwgLnBiYy1jb250ZW50IDo6di1kZWVwID4gZGl2IHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xuICAgICAgICBsaW5lLWhlaWdodDogMTQwJTtcbiAgICAgICAgY29sb3I6ICMzNTM1MzU7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBTRlBELVJlZ3VsYXI7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgfVxuXG4gICAgLnBiYy1jb3ZlciA+IGltZyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbjwvc3R5bGU+XG4iXSwic291cmNlUm9vdCI6IiJ9*/