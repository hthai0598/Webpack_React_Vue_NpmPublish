
.txt[data-v-475807a2] {
      font-size: 18px;
      line-height: 140%;
      color: #353535;
      font-family: SFPD-Regular;
      margin-bottom: 15px;
}

 /* .wrapPopup::-webkit-scrollbar {
      display: none;
  }*/

/*  .wrapPopupOverload::-webkit-scrollbar {
      display: none;
  }*/
.popup_container[data-v-475807a2] {
      width: 100%;
      position: relative;
      height: 100%;
      z-index: 200;
}
.dragging[data-v-475807a2] {
      cursor: grabbing !important;
}
.wrapPopup[data-v-475807a2] {
      /*padding: 6px;*/
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 999;
      background: rgb(10 10 10 / 84%);
      transition: 0.5s;
      overflow: hidden;
      overflow-x: auto;
      overflow-y: auto;
      display: flex;
      justify-content: center;
      height: 100%;
}
.wrapPopupOverload[data-v-475807a2] {
      height: 100%;
      overflow-y: auto;
      align-items: normal;
      top: 0;
      width: 100%;
      z-index: 999;
      position: fixed;
      display: flex;
      overflow-y: auto;
      justify-content: center;
}
.content_popup[data-v-475807a2] {
      z-index: 1000;
      overflow-y: auto;
      padding: 20px 20px 40px 20px;
}
.wrapBox[data-v-475807a2] {
      z-index: 500;
      -webkit-overflow-scrolling: touch;
      text-align: left;
      vertical-align: middle;
      background: #fff;
      margin: 0 auto;
      border-radius: 8px;
      position: absolute;
}
.list_afnews-mid li[data-v-475807a2] {
      margin-bottom: 25px;
      padding-bottom: 25px;
      border-bottom: 1px dashed #E5E5E5;
}
.cate-box[data-v-475807a2] {
      width: 700px;
      max-width: 100%;
      display: flex;
      flex-direction: column;
      margin-bottom: 30px;
}
.cate-box .cate-label[data-v-475807a2] {
          font-size: 15px;
          line-height: 20px;
          color: #8e8e8e;
          font-family: SFPD-SemiBold;
          margin-bottom: 15px;
}
.list-cate[data-v-475807a2] {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
}
.list_afnews-mid li[data-v-475807a2] {
      margin-bottom: 25px;
      padding-bottom: 25px;
      border-bottom: 1px dashed #e5e5e5;
}
.list_afnews-mid li[data-v-475807a2]:nth-last-child(1) {
          margin-bottom: 0;
          border-bottom: none;
          padding-bottom: 0;
}
.fade-in[data-v-475807a2] {
      opacity: 1;
      animation-name: fadeInOpacity-data-v-475807a2;
      animation-timing-function: ease-in;
      animation-duration: 0.2s;
}
.fade-out[data-v-475807a2] {
      opacity: 0;
      animation-name: fadeOutOpacity-data-v-475807a2;
      animation-timing-function: ease-out;
      animation-duration: 0.4s;
}
@keyframes fadeInOpacity-data-v-475807a2 {
0% {
          opacity: 0;
}
100% {
          opacity: 1;
}
}
@keyframes fadeOutOpacity-data-v-475807a2 {
0% {
          opacity: 1;
}
100% {
          opacity: 0;
}
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/